name: BloodPressure_SABI                                  

env:
  AZURE_WEBAPP_NAME: BloodPressureApp               # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'              

on:
 workflow_dispatch:        
# push:                                             #  workflow_dispatch for manually triggered
#   branches: [ master ]
 

jobs:
  pipeline:                                         
    runs-on: windows-latest                         # runner
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build for Release
      run: dotnet build --configuration Release

    - name: Create Test Results Directory
      run: mkdir -p ./TestResults
      
    - name: Run Unit Tests and Save Plain Text Results
      run: |
          dotnet test --filter "Category=Unit" --no-build --configuration Release --collect "Code coverage"  > ${{github.workspace}}/reports/unit-tests.txt

    - name: Run BDD Tests and Save Plain Text Results
      run: |
          dotnet test --filter "Category=BDD" --no-build --configuration Release > ${{github.workspace}}/reports/bdd-tests.txt

    - name: Install SonarCloud Scanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Add .NET tools to PATH
      shell: powershell
      run: echo "$Env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8
    
    - name: Run SonarCloud Code Analysis (Begin)
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      shell: powershell
      run: |
          dotnet sonarscanner begin /k:"SabZero79_bp" /o:"sabzero79" /d:sonar.login="${{ secrets.SONARCLOUD_SECRET }}"

    - name: Build Project
      shell: powershell
      run: dotnet build

    - name: Run SonarCloud Code Analysis (End)
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      shell: powershell
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONARCLOUD_SECRET }}"
          
    - name: Save SonarCloud Report to Text File
      shell: powershell
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      run: |
          # Set up headers and make the API call
          $headers = @{
              Authorization = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${Env:SONAR_TOKEN}:"))
          }
          $response = Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?componentKeys=SabZero79_bp" -Headers $headers
          
          # Parse JSON and select relevant fields
          $issues = ($response.Content | ConvertFrom-Json).issues | ForEach-Object {
              "File: $($_.component)",
              "Line: $($_.line)",
              "Message: $($_.message)",
              "`n"    
          }
          
          # Save the formatted output to a file
          $issues -join "`n" | Out-File -FilePath ${{github.workspace}}/reports/sonar-report.txt -Encoding utf8

    - name: Upload Test Results as Artifacts
      uses: actions/upload-artifact@v4
      with:
          name: TestResults
          path: ${{github.workspace}}/reports
          retention-days: 7
          
  dependency_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BMI'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 8            
          # fail if CVSS score (CVE scoring system) is High >=8
          
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

      - name: Publish
        run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

# Deploy to Azure Web apps
      - name: Run Azure webapp deploy action using publish profile credentials
        uses: azure/webapps-deploy@v2
        with: 
            app-name: ${{ env.AZURE_WEBAPP_NAME }}                        # your app name
            publish-profile: ${{ secrets.AZURE_SECRET  }} # Define secret variable in repository settings as per action documentation
            package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
