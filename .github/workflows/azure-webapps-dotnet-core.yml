# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: BloodPressure_SABI                                   # "BMI_CI" workflow, name is optional

env:
  AZURE_WEBAPP_NAME: BloodPressureApp                  # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'              # set this to the path to your web app project

on:
 workflow_dispatch:        
# push:                                             #  workflow_dispatch for manually triggered
#   branches: [ master ]
 

jobs:
  build:                                            # "build" job
    runs-on: windows-latest                         # runner
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build for Release
      run: dotnet build --configuration Release

    - name: Create Test Results Directory
      run: mkdir -p ./TestResults
      
    # Run OWASP Dependency-Check
    - name: Run OWASP Dependency-Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        format: "ALL"                            # Generate all supported report formats
        project: "BloodPressureApp"              # Name of your project for the report
        scan: "./"                               # Path to scan for dependencies
        out: "./TestResults"                     # Output directory for reports

    # Convert HTML or XML report to plain text (optional)
    - name: Convert OWASP Dependency-Check Report to Plain Text
      shell: pwsh
      run: |
        $xmlPath = "./TestResults/dependency-check-report.xml"
        $txtPath = "./TestResults/dependency-check-report.txt"
        if (Test-Path $xmlPath) {
          [xml]$report = Get-Content $xmlPath
          $issues = $report.dependencyCheck.report.dependencies.dependency | ForEach-Object {
            "File: $($_.fileName)"
            "Vulnerabilities: "
            $_.vulnerabilities.vulnerability | ForEach-Object {
              "  - Name: $($_.name)"
              "    Severity: $($_.severity)"
              "    Description: $($_.description)"
              "`n"
            }
          }
          $issues -join "`n" | Out-File -FilePath $txtPath -Encoding utf8
        } else {
          "No vulnerabilities found." | Out-File -FilePath $txtPath -Encoding utf8
        }
        
    - name: Upload Test Results as Artifacts
      uses: actions/upload-artifact@v3
      with:
          name: TestResults
          path: ./TestResults
          retention-days: 7

    #- name: Run unit tests
    # run: dotnet test bmiUnitTestProject/bmiUnitTestProject.csproj --collect "Code coverage" -l:trx
   
    #- name: Publish Unit Test Results
     # uses: dorny/test-reporter@v1
     # with:
      #  artifact: ''
      #  name: MS Tests                  
      #  path: '**.trx'
      #  reporter: 'dotnet-trx'                     

    - name: Publish
      run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

# Deploy to Azure Web apps
    - name: Run Azure webapp deploy action using publish profile credentials
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}                        # your app name
        publish-profile: ${{ secrets.AZURE_SECRET  }} # Define secret variable in repository settings as per action documentation
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
