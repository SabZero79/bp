name: BloodPressure_SABI                                  

env:
  AZURE_WEBAPP_NAME: BloodPressureAppSabi               # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'
  URI: https://bloodpressureappsabi-adfycva4hqamanee.northeurope-01.azurewebsites.net
  URIS: https://bloodpressureappsabi-staging-erape7cyavdcdkgk.northeurope-01.azurewebsites.net

on:
 workflow_dispatch:        
# push:                                             #  workflow_dispatch for manually triggered
#   branches: [ master ]
 

jobs:
  Dependency_Check_Sonar_Cloud_Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore
      
      - name: DependencyCheck
        uses: dependency-check/Dependency-Check_Action@main
        id: DependencyCheck
        with:
          project: 'BloodPressure'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 8            
          # fail if CVSS score (CVE scoring system) is High >=8
          
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
           name: Dependency Check report
           path: ${{github.workspace}}/reports

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=sabzero79
            -Dsonar.projectKey=SabZero79_bp
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}

  Unit_BDD_Sonar_Tests_Coverage:
    name: Unit Test, BDD Test, Coverage Report and Sonar Test text file
    needs: Dependency_Check_Sonar_Cloud_Scan
    runs-on: windows-latest                         # runner
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build for Release
      run: dotnet build --configuration Release

    - name: Create Test Results Directory
      run: mkdir -p ./TestResults
      
    #Coverage report - VS solution only allows one runsetting file and that's used for Selenium tests, need to create one on the fly for coverage..
    - name: Create Runsettings File
      run: |
            echo "<?xml version='1.0' encoding='utf-8' ?>" >> coverage.runsettings
            echo "<RunSettings>" >> coverage.runsettings
            echo "   <DataCollectionRunSettings>" >> coverage.runsettings
            echo "    <DataCollectors>" >> coverage.runsettings
            echo "      <DataCollector friendlyName='XPlat code coverage'>" >> coverage.runsettings
            echo "        <Configuration>" >> coverage.runsettings
            echo "          <Format>cobertura,opencover</Format>" >> coverage.runsettings
            echo "        </Configuration>" >> coverage.runsettings
            echo "      </DataCollector>" >> coverage.runsettings
            echo "    </DataCollectors>" >> coverage.runsettings
            echo "  </DataCollectionRunSettings>" >> coverage.runsettings
            echo "</RunSettings>" >> coverage.runsettings

    #Unit tests - XUnit + Code Coverage
    - name: Test
      run: dotnet test TestProject/UnitTests.csproj --settings coverage.runsettings > ./TestResults/unit-tests.txt
      
    - name: Install Report Generator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate Coverage Report
      run: reportgenerator -reports:".\**\TestResults\**\coverage.cobertura.xml" -targetdir:"coverage" -reporttypes:Html

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
          name: coverage-report
          path: coverage/**

    #BDD tests - NUnit + Specflow
    - name: Run Unit Tests and Save Plain Text Results
      run: dotnet test BDDTestProject/BDDTestProject.csproj --no-build --configuration Release  > ./TestResults/bdd-tests.txt

    # Sonar cloud run 2 with a txt exctract
    - name: Install SonarCloud Scanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Add .NET tools to PATH
      shell: powershell
      run: echo "$Env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8
      
    - name: Run SonarCloud Code Analysis (Begin)
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      shell: powershell
      run: dotnet sonarscanner begin /k:"SabZero79_bp" /o:"sabzero79" /d:sonar.login="${{ secrets.SONARCLOUD_SECRET }}" /d:sonar.exclusions="src/coverage/**"
          
    - name: Build Project
      shell: powershell
      run: dotnet build

    - name: Run SonarCloud Code Analysis (End)
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      shell: powershell
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONARCLOUD_SECRET }}" 
          
    - name: Save SonarCloud Report to Text File
      shell: powershell
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      run: |
          # Set up headers and make the API call
          $headers = @{
              Authorization = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${Env:SONAR_TOKEN}:"))
          }
          $response = Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?componentKeys=SabZero79_bp" -Headers $headers
          
          # Parse JSON and select relevant fields
          $issues = ($response.Content | ConvertFrom-Json).issues | ForEach-Object {
              "File: $($_.component)",
              "Line: $($_.line)",
              "Message: $($_.message)",
              "`n"    
          }
          
          # Save the formatted output to a file
          $issues -join "`n" | Out-File -FilePath ./TestResults/sonar-report.txt -Encoding utf8

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
          name: TestResults_UnitTest-BDD-SonarCloud
          path: ./TestResults

  K6_Load_and_ZAP_Tests:
      name: K6 Load Test and ZAP Test
      needs: Unit_BDD_Sonar_Tests_Coverage
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      
      - name: Pull Docker image for k6
        run: docker pull grafana/k6
  
      - name: Run k6 load test, capture report
        run: docker run -i grafana/k6 run - <perf2.js > k6report.txt || true
        
      - uses: actions/upload-artifact@v4
        with:
          name: k6report
          path: k6report.txt
          
      - name: Pull Docker image for ZAP
        run: docker pull zaproxy/zap-weekly
  
      - name: Run baseline scan
        run: docker run -v /report:/zap/wrk/:rw --user root -t zaproxy/zap-weekly zap-baseline.py -t ${{env.URIS}} -I -r zapreport.html
    
      - uses: actions/upload-artifact@v4
        name: upload ZAP report
        with:
          name: ZAPreport
          path: /report/zapreport.html

  deploy_test_blue_green:                                             
          name: deploy to staging slot, run E2E tests, swap slots
          needs: K6_Load_and_ZAP_Tests
          environment:
            name: QA
            url:  ${{ env.URIS }}                                
          runs-on: windows-latest
          steps:
          - uses: actions/checkout@v4
      
          # publish web app ready for deployment
          - name: Publish web app
            run: dotnet publish -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
          
          # Deploy to Azure app service to staging slot using publish profile for staging slot
          - name: Run Azure webapp deploy action using publish profile credentials
            uses: azure/webapps-deploy@v2
            with: 
              app-name: ${{ env.AZURE_WEBAPP_NAME }}                            
              publish-profile: ${{ secrets.AZURE_SECRET_STAGING  }}     # Define secret variable in environment
              slot-name: staging
              package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'

           # Run Selenium tests - MSTest
          - name: Run Selenium tests
            run: dotnet test ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp/SeleniumTest.dll /Settings:SeleniumTest.runsettings --logger "trx;LogFileName=Selenium-test.trx"
          - name: Upload Selenium Test Log as Artifact
            uses: actions/upload-artifact@v4
            with:
              name: Selenium-Test-Log
              path: ./TestResults/Selenium-test.trx
          # login to Azure account
          - uses: azure/login@v2
            with:
              creds: ${{ secrets.AZURE_SECRET_PROD }}
      
          # blue/green
          - name: swap staging and production slots
            run: |
              az webapp deployment slot swap -n BloodPressureAppSabi -ga -g sabi_azure --slot staging --target-slot production

          
