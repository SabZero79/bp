name: BloodPressure_SABI                                  

env:
  AZURE_WEBAPP_NAME: BloodPressureApp               # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'
  MIN_LINE_RATE: 10  

on:
 workflow_dispatch:        
# push:                                             #  workflow_dispatch for manually triggered
#   branches: [ master ]
 

jobs:
  Dependency_Check_and_Code_Coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BMI'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 8            
          # fail if CVSS score (CVE scoring system) is High >=8
          
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

      # CODE COVERAGE
      - name: Run Unit Tests and Save Plain Text Results
        run: |
          dotnet test --filter "Category=Unit" --no-build --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '10 30'

      # CODE COVERAGE TXT REPORT
      - name: Extract Coverage Summary to Markdown File
        run: |
          line_rate=$(grep -oP '(?<=line-rate=")\d+\.\d+' coverage/**/coverage.cobertura.xml | awk '{printf "%.0f", $1 * 100}')
          branch_rate=$(grep -oP '(?<=branch-rate=")\d+\.\d+' coverage/**/coverage.cobertura.xml | awk '{printf "%.0f", $1 * 100}')
          total_lines=$(grep -oP '(?<=lines-covered=")\d+' coverage/**/coverage.cobertura.xml | head -1)
          total_lines_valid=$(grep -oP '(?<=lines-valid=")\d+' coverage/**/coverage.cobertura.xml | head -1)
          total_branches=$(grep -oP '(?<=branches-covered=")\d+' coverage/**/coverage.cobertura.xml | head -1)
          total_branches_valid=$(grep -oP '(?<=branches-valid=")\d+' coverage/**/coverage.cobertura.xml | head -1)
          min_line_rate=$MIN_LINE_RATE
          line_rate=$(echo $line_rate | cut -c1-2)
          branch_rate=$(echo $branch_rate | cut -c1-2)
          echo 'Package | Line Rate | Branch Rate | Health' > coverage/coverage_summary.md
          echo '-------- | --------- | ----------- | ------' >> coverage/coverage_summary.md
          echo "BPCalculator | ${line_rate}% | ${branch_rate}% | ➖" >> coverage/coverage_summary.md
          echo "**Summary** | **${line_rate}%** (${total_lines} / ${total_lines_valid}) | **${branch_rate}%** (${total_branches} / ${total_branches_valid}) | ➖" >> coverage/coverage_summary.md
          echo '' >> coverage/coverage_summary.md
          echo "_Minimum allowed line rate is \`${min_line_rate}%\`_" >> coverage/coverage_summary.md

      - name: Upload Coverage Summary as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-summary
          path: coverage/coverage_summary.md

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/**

  Unit_BDD_Sonar_Tests_and_Build:                                         
    runs-on: ubuntu-latest                         # runner
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Create Test Results Directory
      run: mkdir -p ./TestResults
      
    - name: Run Unit Tests and Save Plain Text Results
      run: |
          dotnet test --filter "Category=Unit" --no-build --configuration Release --no-build --verbosity normal > ./TestResults/unit-tests.txt
      
    - name: Run BDD Tests and Save Plain Text Results
      run: |
          dotnet test --filter "Category=BDD" --no-build --configuration Release > ./TestResults/bdd-tests.txt

    - name: Install SonarCloud Scanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Add .NET tools to PATH
      shell: powershell
      run: echo "$Env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8
    
    - name: Run SonarCloud Code Analysis (Begin)
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      shell: powershell
      run: |
          dotnet sonarscanner begin /k:"SabZero79_bp" /o:"sabzero79" /d:sonar.login="${{ secrets.SONARCLOUD_SECRET }}"

    - name: Build Project
      shell: powershell
      run: dotnet build

    - name: Run SonarCloud Code Analysis (End)
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      shell: powershell
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONARCLOUD_SECRET }}"
          
    - name: Save SonarCloud Report to Text File
      shell: powershell
      env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_SECRET }}
      run: |
          # Set up headers and make the API call
          $headers = @{
              Authorization = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${Env:SONAR_TOKEN}:"))
          }
          $response = Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?componentKeys=SabZero79_bp" -Headers $headers
          
          # Parse JSON and select relevant fields
          $issues = ($response.Content | ConvertFrom-Json).issues | ForEach-Object {
              "File: $($_.component)",
              "Line: $($_.line)",
              "Message: $($_.message)",
              "`n"    
          }
          
          # Save the formatted output to a file
          $issues -join "`n" | Out-File -FilePath ./TestResults/sonar-report.txt -Encoding utf8

    - name: Upload Test Results as Artifacts
      uses: actions/upload-artifact@v4
      with:
          name: TestResults_UnitTest-BDD-SonarCloud
          path: ./TestResults
          retention-days: 7

    - name: Publish
      run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

# Deploy to Azure Web apps
    - name: Run Azure webapp deploy action using publish profile credentials
      uses: azure/webapps-deploy@v2
      with: 
            app-name: ${{ env.AZURE_WEBAPP_NAME }}                        # your app name
            publish-profile: ${{ secrets.AZURE_SECRET  }} # Define secret variable in repository settings as per action documentation
            package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
