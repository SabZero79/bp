# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: BloodPressure_SABI                                   # "BMI_CI" workflow, name is optional

env:
  AZURE_WEBAPP_NAME: BloodPressureApp                  # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'              # set this to the path to your web app project

on:
 workflow_dispatch:        
# push:                                             #  workflow_dispatch for manually triggered
#   branches: [ master ]
 

jobs:
  build:                                            # "build" job
    runs-on: windows-latest                         # runner
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build for Release
      run: dotnet build --configuration Release

    - name: Create Test Results Directory
      run: mkdir -p ./TestResults
      
    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Run Snyk Vulnerability Scan
      env:
          SNYK_TOKEN: ${{ secrets.SNYK_SECRET }}
      shell: powershell
      run: |
          # Ignore non-terminating errors and continue processing
          $ErrorActionPreference = "Continue"

          # Create TestResults folder if it doesn't exist
          New-Item -ItemType Directory -Path ./TestResults -Force

          Write-Output "Running Snyk test on .csproj file..."
          $snykOutput = & { snyk test -Path ./BPCalculator.csproj --json }

          # Debug: Print raw JSON to GitHub Actions log for inspection
          Write-Output "Raw Snyk JSON output:"
          Write-Output $snykOutput

          # Check for issues and parse JSON if there are any
          if ($snykOutput) {
            Write-Output "Snyk scan completed with issues. Parsing output..."

            # Parse JSON and format output for each issue
            $parsedIssues = $snykOutput | ConvertFrom-Json | ForEach-Object {
              "Package: $($_.package)"
              "Severity: $($_.severity)"
              "Title: $($_.title)"
              "URL: https://snyk.io/vuln/$($_.id)"
              "`n"
            }
            $parsedIssues -join "`n" | Out-File -FilePath ./TestResults/snyk-report.txt -Encoding utf8
          } else {
            Write-Output "No vulnerabilities found."
            "No vulnerabilities found." | Out-File -FilePath ./TestResults/snyk-report.txt -Encoding utf8
          }

          # Override exit code to ensure GitHub Actions treats this step as successful
          exit 0
    
    - name: Upload Test Results as Artifacts
      uses: actions/upload-artifact@v3
      with:
          name: TestResults
          path: ./TestResults
          retention-days: 7

    #- name: Run unit tests
    # run: dotnet test bmiUnitTestProject/bmiUnitTestProject.csproj --collect "Code coverage" -l:trx
   
    #- name: Publish Unit Test Results
     # uses: dorny/test-reporter@v1
     # with:
      #  artifact: ''
      #  name: MS Tests                  
      #  path: '**.trx'
      #  reporter: 'dotnet-trx'                     

    - name: Publish
      run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

# Deploy to Azure Web apps
    - name: Run Azure webapp deploy action using publish profile credentials
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}                        # your app name
        publish-profile: ${{ secrets.AZURE_SECRET  }} # Define secret variable in repository settings as per action documentation
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
